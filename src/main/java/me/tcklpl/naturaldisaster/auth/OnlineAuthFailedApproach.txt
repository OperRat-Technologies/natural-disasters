HashMap<InetSocketAddress, GameProfile> loginAttempts = new HashMap<>();
        HashMap<InetSocketAddress, GameProfile> tempGPs = new HashMap<>();

        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Login.Client.START) {
                    @Override
                    public void onPacketReceiving(PacketEvent event) {
                        getLogger().info(ChatColor.YELLOW + "Receiving packet LOGIN START");
                        GameProfile a = event.getPacket().getSpecificModifier(GameProfile.class).read(0);

                        loginAttempts.put(event.getPlayer().getAddress(), a);

                        PacketContainer encBegins = new PacketContainer(PacketType.Login.Server.ENCRYPTION_BEGIN);
                        encBegins.getStrings().write(0, "");
                        encBegins.getSpecificModifier(PublicKey.class).write(0, ((CraftServer)getServer()).getServer().getKeyPair().getPublic() );
                        byte[] randomBytes = new byte[4];
                        new Random().nextBytes(randomBytes);
                        encBegins.getByteArrays().write(0, randomBytes);

                        try {
                            ProtocolLibrary.getProtocolManager().sendServerPacket(event.getPlayer(), encBegins);
                        } catch (InvocationTargetException e) {
                            e.printStackTrace();
                        }

                        try {
                            Thread.sleep(2500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                    }
                }
        );

        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Login.Server.SET_COMPRESSION) {
                    @Override
                    public void onPacketSending(PacketEvent event) {
                        do {
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        } while (tempGPs.get(event.getPlayer().getAddress()) == null);
                        getLogger().info(ChatColor.AQUA + "Sending packet SET COMPRESSION");
                    }

                }
        );

        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Login.Client.ENCRYPTION_BEGIN) {
                    @Override
                    public void onPacketReceiving(PacketEvent event) {


                        getLogger().info(ChatColor.YELLOW + "Receiving packet ENCRYPTION BEGINS");

                        BigInteger serverId = new BigInteger(MinecraftEncryption.a("",
                                ((CraftServer)getServer()).getServer().getKeyPair().getPublic(),
                                ((PacketLoginInEncryptionBegin)event.getPacket().getHandle()).a(((CraftServer)getServer()).getServer().getKeyPair().getPrivate())
                        ));
                        String serverIdText = serverId.toString(16);
                        getLogger().info(serverIdText);

                        GameProfile gp = loginAttempts.get(event.getPlayer().getAddress());
                        loginAttempts.remove(event.getPlayer().getAddress());
                        UUID uuid = null;

                        try {

                            AuthUtils.PremiumCheck premiumCheck = new AuthUtils.PremiumCheck(gp.getName(), serverIdText);

                            if (premiumCheck.isPremium()) {
                                getLogger().info(ChatColor.GREEN + "Jogador " + gp.getName() + " entrando autenticado pela Mojang");
                                uuid = SkinUtils.getUndashedStringAsUUID(premiumCheck.getResponse().get("id").toString());
                                getLogger().info(ChatColor.GREEN + "UUID: " + uuid.toString());
                            } else {
                                getLogger().info(ChatColor.YELLOW + "Jogador " + gp.getName() + " entrando sem ser autenticado pela Mojang");
                                uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + gp.getName()).getBytes());
                                getLogger().info(ChatColor.YELLOW + "UUID: " + uuid.toString());
                            }

                            GameProfile finalProfile = new GameProfile(uuid, gp.getName());

                            tempGPs.put(event.getPlayer().getAddress(), finalProfile);

//                            MinecraftServer mineServer = ((CraftServer) getServer()).getServer();

                            //---------------------------------------------------------------------------------------

//                            Type[] interfaces = event.getPacketType().getPacketClass().getGenericInterfaces();
//                            for (Type iface : interfaces)
//                                getLogger().info("Interface: " + iface.getTypeName());


//                            String hostname = "";
//
//                            List<EntityPlayer> players = new ArrayList<>();
//                            for (Player all : Bukkit.getOnlinePlayers()) {
//                                if (all.getUniqueId().equals(finalProfile.getId()) || all.getName().equalsIgnoreCase(finalProfile.getName())) {
//                                    // kick player, there is already one online with this name
//                                    event.setCancelled(true);
//                                }
//                            }
//
//                            InetSocketAddress socketAddress = event.getPlayer().getAddress();
//                            EntityPlayer entity = new EntityPlayer(mineServer,
//                                    mineServer.getWorldServer(DimensionManager.OVERWORLD),
//                                    finalProfile,
//                                    new PlayerInteractManager(mineServer.getWorldServer(DimensionManager.OVERWORLD)));
//                            CraftPlayer craftPlayer = entity.getBukkitEntity();
//
//                            assert socketAddress != null;
//                            PlayerLoginEvent playerLoginEvent = new PlayerLoginEvent((Player) craftPlayer,
//                                    hostname,
//                                    socketAddress.getAddress(),
//                                    socketAddress.getAddress());
//
//                            // check for bans here
//
//                            Player p = (Player) craftPlayer;
//                            getLogger().info(p.getName());
//
//                            Bukkit.getScheduler().runTask(mainInstance, () -> {
//                                Bukkit.getPluginManager().callEvent(playerLoginEvent);
//                                if (playerLoginEvent.getResult() != PlayerLoginEvent.Result.ALLOWED) {
//                                    getLogger().info(ChatColor.RED + "Not allowed");
//                                }
//                            });
//
//                            // mandar os 2 packets aqui
//
//                            PacketContainer compression = new PacketContainer(PacketType.Login.Server.SET_COMPRESSION);
//                            compression.getIntegers().write(0, 256);
//                            try {
//                                ProtocolLibrary.getProtocolManager().sendServerPacket(event.getPlayer(), compression);
//                            } catch (InvocationTargetException e) {
//                                e.printStackTrace();
//                            }
//
//                            PacketContainer success = new PacketContainer(PacketType.Login.Server.SUCCESS);
//                            success.getSpecificModifier(GameProfile.class).write(0, finalProfile);
//                            success.setMeta("custom", "yes");
//                            try {
//                                ProtocolLibrary.getProtocolManager().sendServerPacket(event.getPlayer(), success);
//                            } catch (InvocationTargetException e) {
//                                e.printStackTrace();
//                            }
//
//                            // continaur aqui
//
//                            if (entity.playerConnection == null)
//                                getLogger().info(ChatColor.RED + "null player connection");
//                            else getLogger().info("not null player connection");
//
//                            NetworkManager networkManager = entity.playerConnection.networkManager;
//
//                            WorldServer worldServer = mineServer.getWorldServer(entity.dimension);
//
//                            entity.spawnIn(worldServer);
//                            entity.playerInteractManager.a((WorldServer)entity.world);
//
//                            PlayerSpawnLocationEvent spawnLocationEvent = new PlayerSpawnLocationEvent(p, craftPlayer.getLocation());
//                            Bukkit.getScheduler().runTask(mainInstance, () -> Bukkit.getPluginManager().callEvent(spawnLocationEvent));
//
//                            Location loc = spawnLocationEvent.getSpawnLocation();
//                            worldServer = ((CraftWorld) Objects.requireNonNull(loc.getWorld())).getHandle();
//
//                            entity.spawnIn(worldServer);
//                            entity.setPosition(loc.getX(), loc.getY(), loc.getZ());
//                            //entity.setYawPitch();
//
//                            WorldData worldData = worldServer.getWorldData();
//                            //sets gamemode
//
//                            PlayerConnection playerConnection = new PlayerConnection(mineServer, networkManager, entity);
//                            playerConnection.sendPacket(new PacketPlayOutLogin(entity.getId(),
//                                    EnumGamemode.ADVENTURE,
//                                    WorldData.c(worldData.getSeed()),
//                                    worldData.isHardcore(),
//                                    worldServer.worldProvider.getDimensionManager().getType(),
//                                    24,
//                                    worldData.getType(),
//                                    worldServer.spigotConfig.viewDistance,
//                                    false, false));
//                            playerConnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(mineServer.getServerModName()) ));
//                            playerConnection.sendPacket(new PacketPlayOutServerDifficulty(worldData.getDifficulty(), worldData.isDifficultyLocked()));
//                            playerConnection.sendPacket(new PacketPlayOutAbilities(entity.abilities));
//                            playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entity.inventory.itemInHandIndex));
//                            playerConnection.sendPacket(new PacketPlayOutRecipeUpdate(mineServer.getCraftingManager().b()));
//                            playerConnection.sendPacket(new PacketPlayOutTags(mineServer.getTagRegistry()));
//
//                            // ------ func
//                            int i = mineServer.b(finalProfile);
//
//                            if (entity.playerConnection == null)
//                                getLogger().info(ChatColor.RED + "null conenction");
//                            else getLogger().info(ChatColor.GREEN + "not null");





                        } catch (IOException e) {
                            e.printStackTrace();
                        }


                        event.setCancelled(true);
                    }
                }
        );

        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Login.Server.ENCRYPTION_BEGIN) {
                    @Override
                    public void onPacketSending(PacketEvent event) {
                        getLogger().info(ChatColor.AQUA + "Sending packet ENCRYPTION BEGINS");
                    }
                }
        );

        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Play.Server.LOGIN) {
                    @Override
                    public void onPacketSending(PacketEvent event) {
                        do {
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        } while (tempGPs.get(event.getPlayer().getAddress()) == null);
                        getLogger().info(ChatColor.AQUA + "Sending packet LOGIN");
                    }
                }
        );


        ProtocolLibrary.getProtocolManager().addPacketListener(
                new PacketAdapter(this, PacketType.Login.Server.SUCCESS) {
                    @Override
                    public void onPacketSending(PacketEvent event) {

                        if (event.getPacket().getMeta("custom").isPresent()) {
                            getLogger().info(ChatColor.AQUA + "Sending packet SUCCESS");

                            GameProfile gp  = event.getPacket().getSpecificModifier(GameProfile.class).read(0);
                            getLogger().info(ChatColor.AQUA + gp.getName());
                            getLogger().info(ChatColor.AQUA + gp.getId().toString());
                            getLogger().info(ChatColor.AQUA + gp.getProperties().toString());
                        } else {

                            getLogger().info(ChatColor.YELLOW + "Cancelling first SUCCESS packet");

                            do {
                                try {
                                    Thread.sleep(500);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            } while (tempGPs.get(event.getPlayer().getAddress()) == null);
                            GameProfile gp  = tempGPs.get(event.getPlayer().getAddress());

                            getLogger().info(ChatColor.AQUA + gp.getName());
                            getLogger().info(ChatColor.AQUA + gp.getId().toString());
                            getLogger().info(ChatColor.AQUA + gp.getProperties().toString());

                            PacketContainer success = new PacketContainer(PacketType.Login.Server.SUCCESS);
                            success.getSpecificModifier(GameProfile.class).write(0, gp);
                            success.setMeta("custom", "yes");

                            try {
                                ProtocolLibrary.getProtocolManager().sendServerPacket(event.getPlayer(), success);
                            } catch (InvocationTargetException e) {
                                e.printStackTrace();
                            }

                            event.setCancelled(true);
                        }
                    }
                }
        );